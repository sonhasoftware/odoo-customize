from odoo import api, fields, models
import requests
import json


class ConfigAPI(models.Model):
    _name = 'config.api'

    url = fields.Char(string="URL API", required=True)
    user = fields.Char(string="T√™n ƒëƒÉng nh·∫≠p", required=True)
    password = fields.Char(string="M·∫≠t kh·∫©u", required=True)

    def action_download(self):
        url = str(self.url)

        # Th√¥ng tin x√°c th·ª±c cho Basic Auth
        username = str(self.user)
        password = str(self.password)

        response = requests.get(url, auth=(username, password), verify=False)

        # Ki·ªÉm tra ph·∫£n h·ªìi c·ªßa API
        if response.status_code == 200:
            data = response.json().get('d', {}).get('results', [])
            table_name = "data_sap"
            self.create_dynamic_fields(table_name, data)
            self.insert_data(table_name, data)

    def create_dynamic_fields(self, table_name, data):
        """T·ª± ƒë·ªông t·∫°o field trong b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i."""

        cr = self._cr  # L·∫•y cursor ƒë·ªÉ th·ª±c thi SQL
        existing_columns = {}

        # üîπ L·∫•y danh s√°ch c√°c c·ªôt hi·ªán c√≥ trong b·∫£ng
        cr.execute(f"""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = %s;
        """, (table_name,))

        for row in cr.fetchall():
            existing_columns[row[0].lower()] = True  # Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ tr√°nh l·ªói t√™n c·ªôt

        for record in data:  # L·∫∑p qua t·ª´ng dictionary trong danh s√°ch
            for key, value in record.items():
                column_name = key.lower()  # Chuy·ªÉn key th√†nh ch·ªØ th∆∞·ªùng ƒë·ªÉ tr√°nh l·ªói

                if column_name not in existing_columns:
                    field_type = "TEXT"  # M·∫∑c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu l√† TEXT

                    if isinstance(value, int):
                        field_type = "INTEGER"
                    elif isinstance(value, float):
                        field_type = "DOUBLE PRECISION"
                    elif isinstance(value, bool):
                        field_type = "BOOLEAN"

                    # üîπ Th√™m c·ªôt m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
                    cr.execute(f"ALTER TABLE {table_name} ADD COLUMN {column_name} {field_type};")
                    existing_columns[column_name] = True  # ƒê√°nh d·∫•u c·ªôt ƒë√£ th√™m

        self._cr.commit()

    def insert_data(self, table_name, data):
        """Ch√®n d·ªØ li·ªáu v√†o b·∫£ng Odoo v·ªõi c√°c c·ªôt m·ªõi (h·ªó tr·ª£ nhi·ªÅu b·∫£n ghi)."""

        if not isinstance(data, list):
            raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o ph·∫£i l√† danh s√°ch ch·ª©a c√°c dictionary!")

        for record in data:  # L·∫∑p t·ª´ng dictionary trong danh s√°ch
            processed_data = {}

            for key, value in record.items():
                # Chu·∫©n h√≥a c√°c tr∆∞·ªùng id (vi·∫øt hoa ho·∫∑c vi·∫øt th∆∞·ªùng ƒë·ªÅu x·ª≠ l√Ω chung m·ªôt c√°ch)
                if key.lower() == 'id':  # D√πng 'id' ƒë·ªÉ chu·∫©n h√≥a t·∫•t c·∫£
                    key = 'id'

                if isinstance(value, dict):
                    processed_data[key] = json.dumps(value)  # Chuy·ªÉn dict sang JSON string
                elif isinstance(value, str) and value.strip() == "":
                    processed_data[key] = None  # Chuy·ªÉn gi√° tr·ªã r·ªóng th√†nh NULL
                else:
                    processed_data[key] = value

            # N·∫øu kh√¥ng c√≥ `id`, t·ª± ƒë·ªông sinh ra `id` theo th·ª© t·ª± tƒÉng d·∫ßn
            if "id" not in processed_data or processed_data["id"] is None:
                self._cr.execute(f"SELECT COALESCE(MAX(id), 0) + 1 FROM {table_name};")
                processed_data["id"] = self._cr.fetchone()[0]

            # X√¢y d·ª±ng c√¢u l·ªánh INSERT
            keys = ", ".join(processed_data.keys())
            values = ", ".join(["%s"] * len(processed_data))

            sql = f"INSERT INTO {table_name} ({keys}) VALUES ({values});"
            self._cr.execute(sql, tuple(processed_data.values()))

        self._cr.commit()

